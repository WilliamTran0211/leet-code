"""This file and its contents are licensed under the Apache License 2.0. Please see the included NOTICE for copyright information and LICENSE for a copy of the license.
"""

import logging
import rules

from pydantic import BaseModel
from typing import Optional

from django.db.models import Q

from rest_framework import permissions
from users.models import User
from django.contrib.auth.models import Group, Permission
from rest_framework.permissions import BasePermission, IsAuthenticated


logger = logging.getLogger(__name__)


class AllPermissions(BaseModel):
    """
    Define some permissions variables right here with syntax like this:

    djangoAppName_ACTION = "<Permission codename>"

        ***
        With Permission codename (automatically generated by Django migrations).
        This information can be found in database.

    """

    def as_list(self):
        list_perm = [t[1] for t in list(self)]
        return Permission.objects.filter(codename__in=list_perm)


all_permissions = AllPermissions()


class ViewClassPermission(BaseModel):
    GET: Optional[str] = None
    PATCH: Optional[str] = None
    PUT: Optional[str] = None
    DELETE: Optional[str] = None
    POST: Optional[str] = None


class CustomPermission(permissions.BasePermission):
    message = "Permission denied"

    def __init__(
        self,
        permission_required,
        safe_methods=["GET", "HEAD", "OPTIONS"],
    ):
        self.permission_required = permission_required
        self.safe_methods = [method.upper() for method in safe_methods]
        self.http_method_permissions = {
            "GET": getattr(self.permission_required, "GET", None),
            "POST": getattr(self.permission_required, "POST", None),
            "PUT": getattr(self.permission_required, "PUT", None),
            "PATCH": getattr(self.permission_required, "PATCH", None),
            "DELETE": getattr(self.permission_required, "DELETE", None),
        }

        self.permission_classes = [IsAuthenticated]

    def __call__(self):
        return self

    def is_super_user(self, request):
        user = User.objects.filter(email=request.user).first()
        if user.is_superuser:
            return True
        return False

    def is_safe_method(self, method):
        return method.upper() in self.safe_methods

    def get_user_group_permissions(self, request):
        user = User.objects.filter(email=request.user).first()
        group = Group.objects.filter(user=user).first()
        return Permission.objects.filter(group=group)

    def get_view_information(self, view):
        view_serializer_meta = view.serializer_class.Meta
        meta_model = view_serializer_meta.model._meta
        return meta_model.app_label, meta_model.model_name

    def permission_filter(self, request, need_permissions):
        if isinstance(need_permissions, str):
            need_permissions = [need_permissions]
        user = User.objects.filter(email=request.user).first()
        group = Group.objects.filter(user=user).first()
        if group:
            results_filter = group.permissions.filter(Q(codename__in=need_permissions))
            return results_filter.exists()
        return False

    def only_one_permission_needed(self):
        # this function is using only for one permission needed
        return isinstance(self.permission_required, str)

    def has_permission(self, request, view):
        if IsAuthenticated.has_permission(self, request, view):
            if self.is_super_user(request):
                return True

            if self.is_safe_method(request.method):
                return True

            if self.only_one_permission_needed():
                return self.permission_filter(request, self.permission_required)

            need_permission = self.http_method_permissions.get(request.method)
            if need_permission is not None:
                return self.permission_filter(request, need_permission)

            self.message = "Permission Denied"
            return False

        return False


class IsOwnerOrReadOnly(permissions.BasePermission):
    message = "You do not have permission to perform this action. You are not the owner of this object."
    OWNER_KEY_WORDS = ["owner", "author", "created_by"]

    def has_object_permission(self, request, view, obj):
        if request.method in permissions.SAFE_METHODS:
            return True

        for field in self.OWNER_KEY_WORDS:
            if hasattr(obj, field):
                obj_owner = getattr(obj, field, None)
                return obj_owner == request.user
        self.message = self.message
        return False


def make_perm(name, pred, overwrite=False):
    if rules.perm_exists(name):
        if overwrite:
            rules.remove_perm(name)
        else:
            return
    rules.add_perm(name, pred)


for _, permission_name in all_permissions:
    make_perm(permission_name, rules.is_authenticated)
