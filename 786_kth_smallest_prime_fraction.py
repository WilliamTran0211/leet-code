"""
786. K-th Smallest Prime Fraction
You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique.
You are also given an integer k.

For every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].

Return the kth smallest fraction considered. 
Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].

 

Example 1:

Input: arr = [1,2,3,5], k = 3
Output: [2,5]
Explanation: The fractions to be considered in sorted order are:
1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.
The third fraction is 2/5.

Example 2:
Input: arr = [1,7], k = 1
Output: [1,7]

lấy số arr thứ i chia số arr thứ j với i < j < len(arr) chọn số nhỏ thứ K 

"""

from typing import List
import heapq


class Solution:
    def kthSmallestPrimeFraction(self, arr: List[int], k: int) -> List[int]:
        if len(arr) == 2:
            return arr
        else:
            # this is correct but it gonna take a lot of time
            # tmp = []
            # for i in range(len(arr) - 1):
            #     for j in range(i + 1, len(arr)):
            #         fraction = float(arr[i] / arr[j])
            #         zip = (fraction, [arr[i], arr[j]])
            #         heapq.heappush(tmp, zip)
            #             if len(tmp) < k:
            #                 tmp.append(zip)
            #             elif tmp[0][0] > faction:
            #                 tmp.pop(0)
            #                 tmp.append(zip)

            #             tmp = sorted(tmp, key=lambda x: x[0], reverse=True)
            #     res = tmp.pop(abs(k - len(tmp)))[1]

            tmp = []
            for i in range(len(arr) - 1):
                for j in range(i + 1, len(arr)):
                    fraction = float(arr[i] / arr[j])
                    zip = (fraction, [arr[i], arr[j]])
                    heapq.heappush(tmp, zip)
            res = []
            for i in range(k):
                res = heapq.heappop(tmp)[1]
                if i == k - 1:
                    break
        return res


sol = Solution()
arr, k = [1, 2, 3, 5], 3
print("ans: ", sol.kthSmallestPrimeFraction(arr, k))

arr, k = [1, 13, 17, 59], 6
print("ans: ", sol.kthSmallestPrimeFraction(arr, k))

# arr, k = [1, 7, 23, 29, 47], 8
# print("ans: ", sol.kthSmallestPrimeFraction(arr, k))

# arr = [
#     1,
#     3,
#     67,
#     97,
#     173,
#     263,
#     307,
#     383,
#     479,
#     797,
#     823,
#     827,
#     853,
#     1039,
#     1063,
#     1291,
#     1543,
#     1669,
#     1901,
#     1987,
#     2017,
#     2029,
#     2063,
#     2089,
#     2351,
#     2381,
#     2459,
#     2531,
#     2539,
#     2647,
#     2801,
#     2851,
#     3067,
#     3221,
#     3257,
#     3499,
#     3761,
#     3833,
#     3853,
#     3863,
#     3923,
#     4021,
#     4157,
#     4231,
#     4349,
#     4451,
#     4567,
#     4583,
#     4729,
#     4969,
#     5077,
#     5147,
#     5441,
#     5591,
#     5827,
#     5897,
#     6043,
#     6079,
#     6257,
#     6301,
#     6361,
#     6473,
#     6653,
#     6737,
#     6791,
#     6803,
#     6949,
#     7369,
#     7481,
#     7499,
#     7643,
#     7829,
#     7949,
#     8311,
#     8539,
#     8831,
#     8969,
#     9181,
#     9337,
#     9749,
#     9851,
#     9887,
#     10069,
#     10141,
#     10271,
#     10781,
#     10831,
#     11059,
#     11113,
#     11239,
#     11279,
#     11411,
#     11489,
#     11549,
#     11621,
#     11953,
#     12041,
#     12377,
#     12421,
#     12497,
#     12763,
#     12823,
#     12953,
#     12973,
#     13147,
#     13679,
#     13997,
#     14011,
#     14029,
#     14051,
#     14489,
#     14593,
#     14621,
#     15199,
#     15391,
#     15559,
#     15607,
#     15641,
#     15649,
#     15749,
#     16067,
#     16073,
#     16831,
#     17327,
#     17449,
#     17627,
#     17921,
#     18047,
#     18149,
#     18257,
#     18289,
#     18367,
#     18539,
#     18743,
#     18839,
#     19433,
#     19483,
#     19541,
#     19813,
#     19861,
#     20047,
#     20233,
#     20533,
#     20753,
#     21179,
#     21401,
#     21517,
#     21611,
#     21863,
#     22039,
#     22157,
#     22727,
#     22739,
#     22861,
#     23021,
#     23159,
#     23173,
#     23297,
#     23447,
#     23669,
#     23671,
#     23801,
#     23831,
#     23857,
#     23893,
#     23981,
#     23993,
#     24071,
#     24247,
#     24533,
#     24547,
#     24709,
#     25031,
#     25033,
#     25117,
#     25261,
#     25321,
#     25453,
#     25469,
#     25903,
#     26227,
#     26297,
#     26713,
#     27277,
#     27431,
#     27941,
#     28351,
#     28687,
#     28697,
#     28859,
#     28901,
#     28933,
#     29129,
#     29147,
#     29207,
#     29209,
#     29401,
#     29587,
#     29741,
#     29881,
# ]
# k = 10453
# # [12953,29881]
# print("ans: ", sol.kthSmallestPrimeFraction(arr, k))


# arr = [
#     1,
#     19,
#     97,
#     101,
#     107,
#     163,
#     191,
#     251,
#     271,
#     641,
#     661,
#     787,
#     811,
#     919,
#     1123,
#     1567,
#     1571,
#     2239,
#     2251,
#     2309,
#     2389,
#     2467,
#     2609,
#     2837,
#     2843,
#     2861,
#     2969,
#     3001,
#     3221,
#     3361,
#     3623,
#     3691,
#     3823,
#     3833,
#     4129,
#     4519,
#     4523,
#     4733,
#     4903,
#     5297,
#     5641,
#     5749,
#     6053,
#     6101,
#     6257,
#     6301,
#     6373,
#     6389,
#     6781,
#     6917,
#     6949,
#     7151,
#     7213,
#     7307,
#     7331,
#     7349,
#     7433,
#     7481,
#     7573,
#     7649,
#     7673,
#     8369,
#     8539,
#     8573,
#     8609,
#     8663,
#     8861,
#     9137,
#     9239,
#     9533,
#     9547,
#     9923,
#     10457,
#     10499,
#     10627,
#     10781,
#     10837,
#     10861,
#     10883,
#     11177,
#     11257,
#     11393,
#     11489,
#     11777,
#     11933,
#     11969,
#     12161,
#     12263,
#     12301,
#     12517,
#     13099,
#     13267,
#     13627,
#     13649,
#     13759,
#     13789,
#     13829,
#     13913,
#     13933,
#     14143,
#     14221,
#     14419,
#     14591,
#     14627,
#     14669,
#     14923,
#     15091,
#     15497,
#     15559,
#     15581,
#     15661,
#     15731,
#     16061,
#     16067,
#     16111,
#     16141,
#     16217,
#     16661,
#     16747,
#     16981,
#     17299,
#     17573,
#     17903,
#     17957,
#     18013,
#     18517,
#     18521,
#     18859,
#     19301,
#     19333,
#     19553,
#     19571,
#     19583,
#     19717,
#     19777,
#     19841,
#     19843,
#     19963,
#     20333,
#     20483,
#     20521,
#     20563,
#     20641,
#     20731,
#     20873,
#     20897,
#     21139,
#     21143,
#     21149,
#     21379,
#     21577,
#     21701,
#     21787,
#     21839,
#     22027,
#     22367,
#     22397,
#     22433,
#     22637,
#     22691,
#     22697,
#     23159,
#     23293,
#     23369,
#     23473,
#     24029,
#     24181,
#     24407,
#     24631,
#     25037,
#     25339,
#     25367,
#     25469,
#     25951,
#     26111,
#     26203,
#     26267,
#     26423,
#     26539,
#     26641,
#     26647,
#     26693,
#     26813,
#     26981,
#     27109,
#     27449,
#     27653,
#     27883,
#     28349,
#     28477,
#     28643,
#     28661,
#     28921,
#     29243,
#     29339,
#     29483,
#     29819,
#     29851,
#     29863,
#     29917,
# ]
# k = 17993
# print("ans: ", sol.kthSmallestPrimeFraction(arr, k))
